// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package com.example.nextjob

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import com.example.nextjob.type.CustomType
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
class RemoteJobsQuery : Query<RemoteJobsQuery.Data, RemoteJobsQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class Company(
    val __typename: String = "Company",
    val name: String,
    val logoUrl: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Company.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Company.name)
      writer.writeString(RESPONSE_FIELDS[2], this@Company.logoUrl)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("name", "name", null, false, null),
          ResponseField.forString("logoUrl", "logoUrl", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Company = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val name = readString(RESPONSE_FIELDS[1])!!
        val logoUrl = readString(RESPONSE_FIELDS[2])
        Company(
          __typename = __typename,
          name = name,
          logoUrl = logoUrl
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Company> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Commitment(
    val __typename: String = "Commitment",
    val title: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Commitment.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Commitment.title)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("title", "title", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Commitment = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val title = readString(RESPONSE_FIELDS[1])!!
        Commitment(
          __typename = __typename,
          title = title
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Commitment> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Job(
    val __typename: String = "Job",
    val id: String,
    val title: String,
    val locationNames: String?,
    val postedAt: Any,
    val description: String?,
    val applyUrl: String?,
    val company: Company?,
    val commitment: Commitment
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Job.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Job.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Job.title)
      writer.writeString(RESPONSE_FIELDS[3], this@Job.locationNames)
      writer.writeCustom(RESPONSE_FIELDS[4] as ResponseField.CustomTypeField, this@Job.postedAt)
      writer.writeString(RESPONSE_FIELDS[5], this@Job.description)
      writer.writeString(RESPONSE_FIELDS[6], this@Job.applyUrl)
      writer.writeObject(RESPONSE_FIELDS[7], this@Job.company?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[8], this@Job.commitment.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
          ResponseField.forString("title", "title", null, false, null),
          ResponseField.forString("locationNames", "locationNames", null, true, null),
          ResponseField.forCustomType("postedAt", "postedAt", null, false, CustomType.DATETIME,
              null),
          ResponseField.forString("description", "description", null, true, null),
          ResponseField.forString("applyUrl", "applyUrl", null, true, null),
          ResponseField.forObject("company", "company", null, true, null),
          ResponseField.forObject("commitment", "commitment", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Job = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)!!
        val title = readString(RESPONSE_FIELDS[2])!!
        val locationNames = readString(RESPONSE_FIELDS[3])
        val postedAt = readCustomType<Any>(RESPONSE_FIELDS[4] as ResponseField.CustomTypeField)!!
        val description = readString(RESPONSE_FIELDS[5])
        val applyUrl = readString(RESPONSE_FIELDS[6])
        val company = readObject<Company>(RESPONSE_FIELDS[7]) { reader ->
          Company(reader)
        }
        val commitment = readObject<Commitment>(RESPONSE_FIELDS[8]) { reader ->
          Commitment(reader)
        }!!
        Job(
          __typename = __typename,
          id = id,
          title = title,
          locationNames = locationNames,
          postedAt = postedAt,
          description = description,
          applyUrl = applyUrl,
          company = company,
          commitment = commitment
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Job> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Remote(
    val __typename: String = "Remote",
    val jobs: List<Job>?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Remote.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@Remote.jobs) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("jobs", "jobs", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Remote = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val jobs = readList<Job>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Job> { reader ->
            Job(reader)
          }
        }?.map { it!! }
        Remote(
          __typename = __typename,
          jobs = jobs
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Remote> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val remotes: List<Remote>
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeList(RESPONSE_FIELDS[0], this@Data.remotes) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forList("remotes", "remotes", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val remotes = readList<Remote>(RESPONSE_FIELDS[0]) { reader ->
          reader.readObject<Remote> { reader ->
            Remote(reader)
          }
        }!!.map { it!! }
        Data(
          remotes = remotes
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "2066341ccfb8846fcce4633f15f8efd0a67ec791a01af0c811f0a5c45548d038"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query RemoteJobs {
          |  remotes {
          |    __typename
          |    jobs {
          |      __typename
          |      id
          |      title
          |      locationNames
          |      postedAt
          |      description
          |      applyUrl
          |      company {
          |        __typename
          |        name
          |        logoUrl
          |      }
          |      commitment {
          |        __typename
          |        title
          |      }
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "RemoteJobs"
    }
  }
}
